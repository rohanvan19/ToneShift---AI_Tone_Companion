{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSegmentedButtonDensityPadding = exports.getSegmentedButtonColors = exports.getSegmentedButtonBorderRadius = exports.getDisabledSegmentedButtonStyle = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _colors = require(\"../../styles/themes/v2/colors\");\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      (0, _defineProperty2[\"default\"])(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nvar DEFAULT_PADDING = 9;\nvar getSegmentedButtonDensityPadding = exports.getSegmentedButtonDensityPadding = function getSegmentedButtonDensityPadding(_ref) {\n  var density = _ref.density;\n  var padding = DEFAULT_PADDING;\n  switch (density) {\n    case 'small':\n      return padding - 2;\n    case 'medium':\n      return padding - 4;\n    case 'high':\n      return padding - 8;\n    default:\n      return padding;\n  }\n};\nvar getDisabledSegmentedButtonStyle = exports.getDisabledSegmentedButtonStyle = function getDisabledSegmentedButtonStyle(_ref2) {\n  var theme = _ref2.theme,\n    index = _ref2.index,\n    buttons = _ref2.buttons;\n  var _buttons$index, _buttons;\n  var width = getSegmentedButtonBorderWidth({\n    theme: theme\n  });\n  var isDisabled = (_buttons$index = buttons[index]) === null || _buttons$index === void 0 ? void 0 : _buttons$index.disabled;\n  var isNextDisabled = (_buttons = buttons[index + 1]) === null || _buttons === void 0 ? void 0 : _buttons.disabled;\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width\n    };\n  }\n  return {};\n};\nvar getSegmentedButtonBorderRadius = exports.getSegmentedButtonBorderRadius = function getSegmentedButtonBorderRadius(_ref3) {\n  var segment = _ref3.segment,\n    theme = _ref3.theme;\n  if (segment === 'first') {\n    return _objectSpread({\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    }, theme.isV3 && {\n      borderEndWidth: 0\n    });\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    };\n  } else {\n    return _objectSpread({\n      borderRadius: 0\n    }, theme.isV3 && {\n      borderEndWidth: 0\n    });\n  }\n};\nvar getSegmentedButtonBackgroundColor = function getSegmentedButtonBackgroundColor(_ref4) {\n  var checked = _ref4.checked,\n    theme = _ref4.theme;\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return (0, _color[\"default\"])(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n  return 'transparent';\n};\nvar getSegmentedButtonBorderColor = function getSegmentedButtonBorderColor(_ref5) {\n  var theme = _ref5.theme,\n    disabled = _ref5.disabled,\n    checked = _ref5.checked;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  if (checked) {\n    return theme.colors.primary;\n  }\n  return (0, _color[\"default\"])(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();\n};\nvar getSegmentedButtonBorderWidth = function getSegmentedButtonBorderWidth(_ref6) {\n  var theme = _ref6.theme;\n  if (theme.isV3) {\n    return 1;\n  }\n  return _StyleSheet[\"default\"].hairlineWidth;\n};\nvar getSegmentedButtonTextColor = function getSegmentedButtonTextColor(_ref7) {\n  var theme = _ref7.theme,\n    disabled = _ref7.disabled,\n    checked = _ref7.checked,\n    checkedColor = _ref7.checkedColor,\n    uncheckedColor = _ref7.uncheckedColor;\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    if (checked) {\n      return checkedColor !== null && checkedColor !== void 0 ? checkedColor : theme.colors.onSecondaryContainer;\n    }\n    return uncheckedColor !== null && uncheckedColor !== void 0 ? uncheckedColor : theme.colors.onSurface;\n  }\n  if (disabled) {\n    return theme.colors.disabled;\n  }\n  return theme.colors.primary;\n};\nvar getSegmentedButtonColors = exports.getSegmentedButtonColors = function getSegmentedButtonColors(_ref8) {\n  var theme = _ref8.theme,\n    disabled = _ref8.disabled,\n    checked = _ref8.checked,\n    checkedColor = _ref8.checkedColor,\n    uncheckedColor = _ref8.uncheckedColor;\n  var backgroundColor = getSegmentedButtonBackgroundColor({\n    theme: theme,\n    checked: checked\n  });\n  var borderColor = getSegmentedButtonBorderColor({\n    theme: theme,\n    disabled: disabled,\n    checked: checked\n  });\n  var textColor = getSegmentedButtonTextColor({\n    theme: theme,\n    disabled: disabled,\n    checked: checked,\n    checkedColor: checkedColor,\n    uncheckedColor: uncheckedColor\n  });\n  var borderWidth = getSegmentedButtonBorderWidth({\n    theme: theme\n  });\n  return {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    textColor: textColor,\n    borderWidth: borderWidth\n  };\n};","map":{"version":3,"names":["_color","_interopRequireDefault","require","_colors","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","DEFAULT_PADDING","getSegmentedButtonDensityPadding","exports","_ref","density","padding","getDisabledSegmentedButtonStyle","_ref2","theme","index","buttons","_buttons$index","_buttons","width","getSegmentedButtonBorderWidth","isDisabled","disabled","isNextDisabled","borderRightWidth","getSegmentedButtonBorderRadius","_ref3","segment","borderTopRightRadius","borderBottomRightRadius","isV3","borderEndWidth","borderTopLeftRadius","borderBottomLeftRadius","borderRadius","getSegmentedButtonBackgroundColor","_ref4","checked","colors","secondaryContainer","primary","alpha","rgb","string","getSegmentedButtonBorderColor","_ref5","surfaceDisabled","outline","dark","white","black","_ref6","_StyleSheet","hairlineWidth","getSegmentedButtonTextColor","_ref7","checkedColor","uncheckedColor","onSurfaceDisabled","onSecondaryContainer","onSurface","getSegmentedButtonColors","_ref8","backgroundColor","borderColor","textColor","borderWidth"],"sources":["C:\\Users\\vanma\\StudioProjects\\ToneShift\\toneshift-frontend\\node_modules\\react-native-paper\\src\\components\\SegmentedButtons\\utils.ts"],"sourcesContent":["import { StyleSheet, ViewStyle } from 'react-native';\n\nimport color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\ntype BaseProps = {\n  theme: InternalTheme;\n  disabled?: boolean;\n  checked: boolean;\n};\n\ntype SegmentedButtonProps = {\n  checkedColor?: string;\n  uncheckedColor?: string;\n} & BaseProps;\n\nconst DEFAULT_PADDING = 9;\n\nexport const getSegmentedButtonDensityPadding = ({\n  density,\n}: {\n  density?: 'regular' | 'small' | 'medium' | 'high';\n}) => {\n  let padding = DEFAULT_PADDING;\n\n  switch (density) {\n    case 'small':\n      return padding - 2;\n    case 'medium':\n      return padding - 4;\n    case 'high':\n      return padding - 8;\n    default:\n      return padding;\n  }\n};\n\nexport const getDisabledSegmentedButtonStyle = ({\n  theme,\n  index,\n  buttons,\n}: {\n  theme: InternalTheme;\n  buttons: { disabled?: boolean }[];\n  index: number;\n}): ViewStyle => {\n  const width = getSegmentedButtonBorderWidth({ theme });\n  const isDisabled = buttons[index]?.disabled;\n  const isNextDisabled = buttons[index + 1]?.disabled;\n\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width,\n    };\n  }\n  return {};\n};\n\nexport const getSegmentedButtonBorderRadius = ({\n  segment,\n  theme,\n}: {\n  theme: InternalTheme;\n  segment?: 'first' | 'last';\n}): ViewStyle => {\n  if (segment === 'first') {\n    return {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n      ...(theme.isV3 && { borderEndWidth: 0 }),\n    };\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n    };\n  } else {\n    return {\n      borderRadius: 0,\n      ...(theme.isV3 && { borderEndWidth: 0 }),\n    };\n  }\n};\n\nconst getSegmentedButtonBackgroundColor = ({ checked, theme }: BaseProps) => {\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return color(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n  return 'transparent';\n};\n\nconst getSegmentedButtonBorderColor = ({\n  theme,\n  disabled,\n  checked,\n}: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  if (checked) {\n    return theme.colors.primary;\n  }\n\n  return color(theme.dark ? white : black)\n    .alpha(0.29)\n    .rgb()\n    .string();\n};\n\nconst getSegmentedButtonBorderWidth = ({\n  theme,\n}: Omit<BaseProps, 'disabled' | 'checked'>) => {\n  if (theme.isV3) {\n    return 1;\n  }\n\n  return StyleSheet.hairlineWidth;\n};\n\nconst getSegmentedButtonTextColor = ({\n  theme,\n  disabled,\n  checked,\n  checkedColor,\n  uncheckedColor,\n}: SegmentedButtonProps) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    if (checked) {\n      return checkedColor ?? theme.colors.onSecondaryContainer;\n    }\n    return uncheckedColor ?? theme.colors.onSurface;\n  }\n\n  if (disabled) {\n    return theme.colors.disabled;\n  }\n  // Primary color is used for checked state too.\n  return theme.colors.primary;\n};\n\nexport const getSegmentedButtonColors = ({\n  theme,\n  disabled,\n  checked,\n  checkedColor,\n  uncheckedColor,\n}: SegmentedButtonProps) => {\n  const backgroundColor = getSegmentedButtonBackgroundColor({\n    theme,\n    checked,\n  });\n  const borderColor = getSegmentedButtonBorderColor({\n    theme,\n    disabled,\n    checked,\n  });\n  const textColor = getSegmentedButtonTextColor({\n    theme,\n    disabled,\n    checked,\n    checkedColor,\n    uncheckedColor,\n  });\n  const borderWidth = getSegmentedButtonBorderWidth({ theme });\n\n  return { backgroundColor, borderColor, textColor, borderWidth };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}