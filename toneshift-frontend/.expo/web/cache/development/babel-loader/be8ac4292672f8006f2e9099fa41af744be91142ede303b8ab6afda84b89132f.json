{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Asset = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _registry = require(\"@react-native/assets-registry/registry\");\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _AssetSources = require(\"./AssetSources\");\nvar AssetUris = _interopRequireWildcard(require(\"./AssetUris\"));\nvar ImageAssets = _interopRequireWildcard(require(\"./ImageAssets\"));\nvar _LocalAssets = require(\"./LocalAssets\");\nvar _PlatformUtils = require(\"./PlatformUtils\");\nvar _resolveAssetSource2 = _interopRequireDefault(require(\"./resolveAssetSource\"));\nfunction _interopRequireWildcard(e, t) {\n  if (\"function\" == typeof WeakMap) var r = new WeakMap(),\n    n = new WeakMap();\n  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {\n    if (!t && e && e.__esModule) return e;\n    var o,\n      i,\n      f = {\n        __proto__: null,\n        \"default\": e\n      };\n    if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return f;\n    if (o = t ? n : r) {\n      if (o.has(e)) return o.get(e);\n      o.set(e, f);\n    }\n    for (var _t3 in e) \"default\" !== _t3 && {}.hasOwnProperty.call(e, _t3) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t3)) && (i.get || i.set) ? o(f, _t3, i) : f[_t3] = e[_t3]);\n    return f;\n  })(e, t);\n}\nvar Asset = exports.Asset = function () {\n  function Asset(_ref) {\n    var name = _ref.name,\n      type = _ref.type,\n      _ref$hash = _ref.hash,\n      hash = _ref$hash === void 0 ? null : _ref$hash,\n      uri = _ref.uri,\n      width = _ref.width,\n      height = _ref.height;\n    (0, _classCallCheck2[\"default\"])(this, Asset);\n    this.name = void 0;\n    this.type = void 0;\n    this.hash = null;\n    this.uri = void 0;\n    this.localUri = null;\n    this.width = null;\n    this.height = null;\n    this.downloading = false;\n    this.downloaded = false;\n    this._downloadCallbacks = [];\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n    if (hash) {\n      this.localUri = (0, _LocalAssets.getLocalAssetUri)(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n    if (_expoModulesCore.Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n  return (0, _createClass2[\"default\"])(Asset, [{\n    key: \"downloadAsync\",\n    value: function () {\n      var _downloadAsync2 = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee() {\n        var _this = this;\n        var _yield$ImageAssets$ge, width, height, name, _t;\n        return _regenerator[\"default\"].wrap(function (_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.downloaded) {\n                _context.next = 1;\n                break;\n              }\n              return _context.abrupt(\"return\", this);\n            case 1:\n              if (!this.downloading) {\n                _context.next = 3;\n                break;\n              }\n              _context.next = 2;\n              return new Promise(function (resolve, reject) {\n                _this._downloadCallbacks.push({\n                  resolve: resolve,\n                  reject: reject\n                });\n              });\n            case 2:\n              return _context.abrupt(\"return\", this);\n            case 3:\n              this.downloading = true;\n              _context.prev = 4;\n              if (!(_expoModulesCore.Platform.OS === 'web')) {\n                _context.next = 7;\n                break;\n              }\n              if (!ImageAssets.isImageType(this.type)) {\n                _context.next = 6;\n                break;\n              }\n              _context.next = 5;\n              return ImageAssets.getImageInfoAsync(this.uri);\n            case 5:\n              _yield$ImageAssets$ge = _context.sent;\n              width = _yield$ImageAssets$ge.width;\n              height = _yield$ImageAssets$ge.height;\n              name = _yield$ImageAssets$ge.name;\n              this.width = width;\n              this.height = height;\n              this.name = name;\n              _context.next = 7;\n              break;\n            case 6:\n              this.name = AssetUris.getFilename(this.uri);\n            case 7:\n              _context.next = 8;\n              return (0, _PlatformUtils.downloadAsync)(this.uri, this.hash, this.type, this.name);\n            case 8:\n              this.localUri = _context.sent;\n              this.downloaded = true;\n              this._downloadCallbacks.forEach(function (_ref2) {\n                var resolve = _ref2.resolve;\n                return resolve();\n              });\n              _context.next = 10;\n              break;\n            case 9:\n              _context.prev = 9;\n              _t = _context[\"catch\"](4);\n              this._downloadCallbacks.forEach(function (_ref3) {\n                var reject = _ref3.reject;\n                return reject(_t);\n              });\n              throw _t;\n            case 10:\n              _context.prev = 10;\n              this.downloading = false;\n              this._downloadCallbacks = [];\n              return _context.finish(10);\n            case 11:\n              return _context.abrupt(\"return\", this);\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[4, 9, 10, 11]]);\n      }));\n      function downloadAsync() {\n        return _downloadAsync2.apply(this, arguments);\n      }\n      return downloadAsync;\n    }()\n  }], [{\n    key: \"loadAsync\",\n    value: function loadAsync(moduleId) {\n      var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n      return Promise.all(moduleIds.map(function (moduleId) {\n        return Asset.fromModule(moduleId).downloadAsync();\n      }));\n    }\n  }, {\n    key: \"fromModule\",\n    value: function fromModule(virtualAssetModule) {\n      if (typeof virtualAssetModule === 'string') {\n        return Asset.fromURI(virtualAssetModule);\n      }\n      var meta = (0, _registry.getAssetByID)(virtualAssetModule);\n      if (!meta) {\n        throw new Error(\"Module \\\"\".concat(virtualAssetModule, \"\\\" is missing from the asset registry\"));\n      }\n      if (!_PlatformUtils.IS_ENV_WITH_UPDATES_ENABLED) {\n        var _resolveAssetSource = (0, _resolveAssetSource2[\"default\"])(virtualAssetModule),\n          uri = _resolveAssetSource.uri;\n        var asset = new Asset({\n          name: meta.name,\n          type: meta.type,\n          hash: meta.hash,\n          uri: uri,\n          width: meta.width,\n          height: meta.height\n        });\n        if (_expoModulesCore.Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n          asset.localUri = asset.uri;\n          asset.downloaded = true;\n        }\n        Asset.byHash[meta.hash] = asset;\n        return asset;\n      }\n      return Asset.fromMetadata(meta);\n    }\n  }, {\n    key: \"fromMetadata\",\n    value: function fromMetadata(meta) {\n      var metaHash = meta.hash;\n      if (Asset.byHash[metaHash]) {\n        return Asset.byHash[metaHash];\n      }\n      var _selectAssetSource = (0, _AssetSources.selectAssetSource)(meta),\n        uri = _selectAssetSource.uri,\n        hash = _selectAssetSource.hash;\n      var asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: hash,\n        uri: uri,\n        width: meta.width,\n        height: meta.height\n      });\n      Asset.byHash[metaHash] = asset;\n      return asset;\n    }\n  }, {\n    key: \"fromURI\",\n    value: function fromURI(uri) {\n      if (Asset.byUri[uri]) {\n        return Asset.byUri[uri];\n      }\n      var type = '';\n      if (uri.indexOf(';base64') > -1) {\n        type = uri.split(';')[0].split('/')[1];\n      } else {\n        var extension = AssetUris.getFileExtension(uri);\n        type = extension.startsWith('.') ? extension.substring(1) : extension;\n      }\n      var asset = new Asset({\n        name: '',\n        type: type,\n        hash: null,\n        uri: uri\n      });\n      Asset.byUri[uri] = asset;\n      return asset;\n    }\n  }]);\n}();\nAsset.byHash = {};\nAsset.byUri = {};","map":{"version":3,"names":["_registry","require","_expoModulesCore","_AssetSources","AssetUris","_interopRequireWildcard","ImageAssets","_LocalAssets","_PlatformUtils","_resolveAssetSource2","_interopRequireDefault","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","_typeof","has","get","set","_t3","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","Asset","exports","_ref","name","type","_ref$hash","hash","uri","width","height","_classCallCheck2","localUri","downloading","downloaded","_downloadCallbacks","getLocalAssetUri","Platform","OS","getFilename","getFileExtension","_createClass2","key","value","_downloadAsync2","_asyncToGenerator2","_regenerator","mark","_callee","_this","_yield$ImageAssets$ge","_t","wrap","_context","prev","next","abrupt","Promise","resolve","reject","push","isImageType","getImageInfoAsync","sent","downloadAsync","forEach","_ref2","_ref3","finish","stop","apply","arguments","loadAsync","moduleId","moduleIds","Array","isArray","all","map","fromModule","virtualAssetModule","fromURI","meta","getAssetByID","Error","concat","IS_ENV_WITH_UPDATES_ENABLED","_resolveAssetSource","asset","includes","byHash","fromMetadata","metaHash","_selectAssetSource","selectAssetSource","byUri","indexOf","split","extension","startsWith","substring"],"sources":["C:\\Users\\vanma\\StudioProjects\\ToneShift\\toneshift-frontend\\node_modules\\expo-asset\\src\\Asset.ts"],"sourcesContent":["import { getAssetByID } from '@react-native/assets-registry/registry';\nimport { Platform } from 'expo-modules-core';\n\nimport { AssetMetadata, selectAssetSource } from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport * as ImageAssets from './ImageAssets';\nimport { getLocalAssetUri } from './LocalAssets';\nimport { downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n\n// @docsMissing\nexport type AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport { AssetMetadata };\n\n// @needsAudit\n/**\n * The `Asset` class represents an asset in your app. It gives metadata about the asset (such as its\n * name and type) and provides facilities to load the asset data.\n */\nexport class Asset {\n  /**\n   * @private\n   */\n  static byHash = {};\n  /**\n   * @private\n   */\n  static byUri = {};\n\n  /**\n   * The name of the asset file without the extension. Also without the part from `@` onward in the\n   * filename (used to specify scale factor for images).\n   */\n  name: string;\n  /**\n   * The extension of the asset filename.\n   */\n  type: string;\n  /**\n   * The MD5 hash of the asset's data.\n   */\n  hash: string | null = null;\n  /**\n   * A URI that points to the asset's data on the remote server. When running the published version\n   * of your app, this refers to the location on Expo's asset server where Expo has stored your\n   * asset. When running the app from Expo CLI during development, this URI points to Expo CLI's\n   * server running on your computer and the asset is served directly from your computer. If you\n   * are not using Classic Updates (legacy), this field should be ignored as we ensure your assets\n   * are on device before before running your application logic.\n   */\n  uri: string;\n  /**\n   * If the asset has been downloaded (by calling [`downloadAsync()`](#downloadasync)), the\n   * `file://` URI pointing to the local file on the device that contains the asset data.\n   */\n  localUri: string | null = null;\n  /**\n   * If the asset is an image, the width of the image data divided by the scale factor. The scale\n   * factor is the number after `@` in the filename, or `1` if not present.\n   */\n  width: number | null = null;\n  /**\n   * If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.\n   */\n  height: number | null = null;\n  // @docsMissing\n  downloading: boolean = false;\n  // @docsMissing\n  downloaded: boolean = false;\n\n  /**\n   * @private\n   */\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (hash) {\n      this.localUri = getLocalAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  // @needsAudit\n  /**\n   * A helper that wraps `Asset.fromModule(module).downloadAsync` for convenience.\n   * @param moduleId An array of `require('path/to/file')` or external network URLs. Can also be\n   * just one module or URL without an Array.\n   * @return Returns a Promise that fulfills with an array of `Asset`s when the asset(s) has been\n   * saved to disk.\n   * @example\n   * ```ts\n   * const [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));\n   * ```\n   */\n  static loadAsync(moduleId: number | number[] | string | string[]): Promise<Asset[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map((moduleId) => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  // @needsAudit\n  /**\n   * Returns the [`Asset`](#asset) instance representing an asset given its module or URL.\n   * @param virtualAssetModule The value of `require('path/to/file')` for the asset or external\n   * network URL\n   * @return The [`Asset`](#asset) instance for the asset.\n   */\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_ENV_WITH_UPDATES_ENABLED) {\n      // null-check is performed above with `getAssetByID`.\n      const { uri } = resolveAssetSource(virtualAssetModule)!;\n\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  // @docsMissing\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    }\n\n    const { uri, hash } = selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  // @docsMissing\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  // @needsAudit\n  /**\n   * Downloads the asset data to a local file in the device's cache directory. Once the returned\n   * promise is fulfilled without error, the [`localUri`](#assetlocaluri) field of this asset points\n   * to a local file containing the asset data. The asset is only downloaded if an up-to-date local\n   * file for the asset isn't already present due to an earlier download. The downloaded `Asset`\n   * will be returned when the promise is resolved.\n   * @return Returns a Promise which fulfills with an `Asset` instance.\n   */\n  async downloadAsync(): Promise<this> {\n    if (this.downloaded) {\n      return this;\n    }\n    if (this.downloading) {\n      await new Promise<void>((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return this;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type, this.name);\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n    return this;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}