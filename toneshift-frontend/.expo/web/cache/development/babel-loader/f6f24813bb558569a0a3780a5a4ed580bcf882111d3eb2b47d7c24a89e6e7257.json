{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.ToggleButton = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\nvar _color = _interopRequireDefault(require(\"color\"));\nvar _ToggleButtonGroup = require(\"./ToggleButtonGroup\");\nvar _utils = require(\"./utils\");\nvar _theming = require(\"../../core/theming\");\nvar _colors = require(\"../../styles/themes/v2/colors\");\nvar _forwardRef = require(\"../../utils/forwardRef\");\nvar _IconButton = _interopRequireDefault(require(\"../IconButton/IconButton\"));\nvar _excluded = [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\", \"rippleColor\"];\nfunction _interopRequireWildcard(e, t) {\n  if (\"function\" == typeof WeakMap) var r = new WeakMap(),\n    n = new WeakMap();\n  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {\n    if (!t && e && e.__esModule) return e;\n    var o,\n      i,\n      f = {\n        __proto__: null,\n        \"default\": e\n      };\n    if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return f;\n    if (o = t ? n : r) {\n      if (o.has(e)) return o.get(e);\n      o.set(e, f);\n    }\n    for (var _t2 in e) \"default\" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]);\n    return f;\n  })(e, t);\n}\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nvar ToggleButton = exports.ToggleButton = (0, _forwardRef.forwardRef)(function (_ref, ref) {\n  var icon = _ref.icon,\n    size = _ref.size,\n    themeOverrides = _ref.theme,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    style = _ref.style,\n    value = _ref.value,\n    status = _ref.status,\n    _onPress = _ref.onPress,\n    rippleColor = _ref.rippleColor,\n    rest = (0, _objectWithoutProperties2[\"default\"])(_ref, _excluded);\n  var theme = (0, _theming.useInternalTheme)(themeOverrides);\n  var borderRadius = theme.roundness;\n  return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, null, function (context) {\n    var checked = context && context.value === value || status === 'checked';\n    var backgroundColor = (0, _utils.getToggleButtonColor)({\n      theme: theme,\n      checked: checked\n    });\n    var borderColor = theme.isV3 ? theme.colors.outline : (0, _color[\"default\"])(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();\n    return React.createElement(_IconButton[\"default\"], _extends({\n      borderless: false,\n      icon: icon,\n      onPress: function onPress(e) {\n        if (_onPress) {\n          _onPress(e);\n        }\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled: disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor: backgroundColor,\n        borderRadius: borderRadius,\n        borderColor: borderColor\n      }, style],\n      ref: ref,\n      theme: theme,\n      rippleColor: rippleColor\n    }, rest));\n  });\n});\nvar styles = _StyleSheet[\"default\"].create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nvar _default = exports[\"default\"] = ToggleButton;","map":{"version":3,"names":["React","_interopRequireWildcard","require","_StyleSheet","_interopRequireDefault","_color","_ToggleButtonGroup","_utils","_theming","_colors","_forwardRef","_IconButton","_excluded","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","_typeof","has","get","set","_t2","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ToggleButton","exports","forwardRef","_ref","ref","icon","size","themeOverrides","theme","accessibilityLabel","disabled","style","value","status","_onPress","onPress","rippleColor","rest","_objectWithoutProperties2","useInternalTheme","borderRadius","roundness","createElement","ToggleButtonGroupContext","Consumer","context","checked","backgroundColor","getToggleButtonColor","borderColor","isV3","colors","outline","dark","white","black","alpha","rgb","string","_extends","borderless","onValueChange","accessibilityState","selected","styles","content","create","width","height","margin","_default"],"sources":["C:\\Users\\vanma\\StudioProjects\\ToneShift\\toneshift-frontend\\node_modules\\react-native-paper\\src\\components\\ToggleButton\\ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n  Animated,\n  ColorValue,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { getToggleButtonColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { ThemeProp } from '../../types';\nimport { forwardRef } from '../../utils/forwardRef';\nimport type { IconSource } from '../Icon';\nimport IconButton from '../IconButton/IconButton';\n\nexport type Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  iconColor?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  ref?: React.RefObject<View>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = forwardRef<View, Props>(\n  (\n    {\n      icon,\n      size,\n      theme: themeOverrides,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      rippleColor,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme(themeOverrides);\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(\n          context: { value: string | null; onValueChange: Function } | null\n        ) => {\n          const checked: boolean | null =\n            (context && context.value === value) || status === 'checked';\n\n          const backgroundColor = getToggleButtonColor({ theme, checked });\n          const borderColor = theme.isV3\n            ? theme.colors.outline\n            : color(theme.dark ? white : black)\n                .alpha(0.29)\n                .rgb()\n                .string();\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={(e?: GestureResponderEvent | string) => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              accessibilityState={{ disabled, selected: checked }}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor,\n                },\n                style,\n              ]}\n              ref={ref}\n              theme={theme}\n              rippleColor={rippleColor}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default ToggleButton;\n\n// @component-docs ignore-next-line\nexport { ToggleButton };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}