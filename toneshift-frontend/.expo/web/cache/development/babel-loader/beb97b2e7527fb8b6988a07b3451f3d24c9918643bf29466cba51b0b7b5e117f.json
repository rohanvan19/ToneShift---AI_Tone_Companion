{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.SegmentedButtons = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\nvar _View = _interopRequireDefault(require(\"react-native-web/dist/exports/View\"));\nvar _SegmentedButtonItem = _interopRequireDefault(require(\"./SegmentedButtonItem\"));\nvar _utils = require(\"./utils\");\nvar _theming = require(\"../../core/theming\");\nfunction _interopRequireWildcard(e, t) {\n  if (\"function\" == typeof WeakMap) var r = new WeakMap(),\n    n = new WeakMap();\n  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {\n    if (!t && e && e.__esModule) return e;\n    var o,\n      i,\n      f = {\n        __proto__: null,\n        \"default\": e\n      };\n    if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return f;\n    if (o = t ? n : r) {\n      if (o.has(e)) return o.get(e);\n      o.set(e, f);\n    }\n    for (var _t2 in e) \"default\" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]);\n    return f;\n  })(e, t);\n}\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nvar SegmentedButtons = exports.SegmentedButtons = function SegmentedButtons(_ref) {\n  var value = _ref.value,\n    onValueChange = _ref.onValueChange,\n    buttons = _ref.buttons,\n    multiSelect = _ref.multiSelect,\n    density = _ref.density,\n    style = _ref.style,\n    themeOverrides = _ref.theme;\n  var theme = (0, _theming.useInternalTheme)(themeOverrides);\n  return React.createElement(_View[\"default\"], {\n    style: [styles.row, style]\n  }, buttons.map(function (item, i) {\n    var disabledChildStyle = (0, _utils.getDisabledSegmentedButtonStyle)({\n      theme: theme,\n      buttons: buttons,\n      index: i\n    });\n    var segment = i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n    var checked = multiSelect && Array.isArray(value) ? value.includes(item.value) : value === item.value;\n    var onPress = function onPress(e) {\n      var _item$onPress;\n      (_item$onPress = item.onPress) === null || _item$onPress === void 0 || _item$onPress.call(item, e);\n      var nextValue = multiSelect && Array.isArray(value) ? checked ? value.filter(function (val) {\n        return item.value !== val;\n      }) : [].concat((0, _toConsumableArray2[\"default\"])(value), [item.value]) : item.value;\n      onValueChange(nextValue);\n    };\n    return React.createElement(_SegmentedButtonItem[\"default\"], _extends({}, item, {\n      key: i,\n      checked: checked,\n      segment: segment,\n      density: density,\n      onPress: onPress,\n      style: [item.style, disabledChildStyle],\n      labelStyle: item.labelStyle,\n      theme: theme\n    }));\n  }));\n};\nvar styles = _StyleSheet[\"default\"].create({\n  row: {\n    flexDirection: 'row'\n  }\n});\nvar _default = exports[\"default\"] = SegmentedButtons;","map":{"version":3,"names":["React","_interopRequireWildcard","require","_StyleSheet","_interopRequireDefault","_View","_SegmentedButtonItem","_utils","_theming","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","_typeof","has","get","set","_t2","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","SegmentedButtons","exports","_ref","value","onValueChange","buttons","multiSelect","density","style","themeOverrides","theme","useInternalTheme","createElement","styles","row","map","item","disabledChildStyle","getDisabledSegmentedButtonStyle","index","segment","length","undefined","checked","Array","isArray","includes","onPress","_item$onPress","nextValue","filter","val","concat","_toConsumableArray2","_extends","key","labelStyle","create","flexDirection","_default"],"sources":["C:\\Users\\vanma\\StudioProjects\\ToneShift\\toneshift-frontend\\node_modules\\react-native-paper\\src\\components\\SegmentedButtons\\SegmentedButtons.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport type { ThemeProp } from 'src/types';\n\nimport SegmentedButtonItem from './SegmentedButtonItem';\nimport { getDisabledSegmentedButtonStyle } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\n\ntype ConditionalValue<T extends string = string> =\n  | {\n      /**\n       * Array of the currently selected segmented button values.\n       */\n      value: T[];\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect: true;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: T[]) => void;\n    }\n  | {\n      /**\n       * Value of the currently selected segmented button.\n       */\n      value: T;\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect?: false;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: T) => void;\n    };\n\nexport type Props<T extends string = string> = {\n  /**\n   * Buttons to display as options in toggle button.\n   * Button should contain the following properties:\n   * - `value`: value of button (required)\n   * - `icon`: icon to display for the item\n   * - `disabled`: whether the button is disabled\n   * - `accessibilityLabel`: acccessibility label for the button. This is read by the screen reader when the user taps the button.\n   * - `checkedColor`: custom color for checked Text and Icon\n   * - `uncheckedColor`: custom color for unchecked Text and Icon\n   * - `onPress`: callback that is called when button is pressed\n   * - `label`: label text of the button\n   * - `showSelectedCheck`: show optional check icon to indicate selected state\n   * - `style`: pass additional styles for the button\n   * - `testID`: testID to be used on tests\n   */\n  buttons: {\n    value: T;\n    icon?: IconSource;\n    disabled?: boolean;\n    accessibilityLabel?: string;\n    checkedColor?: string;\n    uncheckedColor?: string;\n    onPress?: (event: GestureResponderEvent) => void;\n    label?: string;\n    showSelectedCheck?: boolean;\n    style?: StyleProp<ViewStyle>;\n    labelStyle?: StyleProp<TextStyle>;\n    testID?: string;\n  }[];\n  /**\n   * Density is applied to the height, to allow usage in denser UIs\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n  theme?: ThemeProp;\n} & ConditionalValue<T>;\n\n/**\n * Segmented buttons can be used to select options, switch views or sort elements.</br>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { SafeAreaView, StyleSheet } from 'react-native';\n * import { SegmentedButtons } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('');\n *\n *   return (\n *     <SafeAreaView style={styles.container}>\n *       <SegmentedButtons\n *         value={value}\n *         onValueChange={setValue}\n *         buttons={[\n *           {\n *             value: 'walk',\n *             label: 'Walking',\n *           },\n *           {\n *             value: 'train',\n *             label: 'Transit',\n *           },\n *           { value: 'drive', label: 'Driving' },\n *         ]}\n *       />\n *     </SafeAreaView>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     alignItems: 'center',\n *   },\n * });\n *\n * export default MyComponent;\n *```\n */\nconst SegmentedButtons = <T extends string = string>({\n  value,\n  onValueChange,\n  buttons,\n  multiSelect,\n  density,\n  style,\n  theme: themeOverrides,\n}: Props<T>) => {\n  const theme = useInternalTheme(themeOverrides);\n\n  return (\n    <View style={[styles.row, style]}>\n      {buttons.map((item, i) => {\n        const disabledChildStyle = getDisabledSegmentedButtonStyle({\n          theme,\n          buttons,\n          index: i,\n        });\n        const segment =\n          i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n\n        const checked =\n          multiSelect && Array.isArray(value)\n            ? value.includes(item.value)\n            : value === item.value;\n\n        const onPress = (e: GestureResponderEvent) => {\n          item.onPress?.(e);\n\n          const nextValue =\n            multiSelect && Array.isArray(value)\n              ? checked\n                ? value.filter((val) => item.value !== val)\n                : [...value, item.value]\n              : item.value;\n\n          // @ts-expect-error: TS doesn't preserve types after destructuring, so the type isn't inferred correctly\n          onValueChange(nextValue);\n        };\n\n        return (\n          <SegmentedButtonItem\n            {...item}\n            key={i}\n            checked={checked}\n            segment={segment}\n            density={density}\n            onPress={onPress}\n            style={[item.style, disabledChildStyle]}\n            labelStyle={item.labelStyle}\n            theme={theme}\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n});\n\nexport default SegmentedButtons;\n\n// @component-docs ignore-next-line\nexport { SegmentedButtons as SegmentedButtons };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}