{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _typeof3 = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getStateFromPath;\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _escapeStringRegexp = _interopRequireDefault(require(\"escape-string-regexp\"));\nvar queryString = _interopRequireWildcard(require(\"query-string\"));\nvar _findFocusedRoute = _interopRequireDefault(require(\"./findFocusedRoute\"));\nvar _validatePathConfig = _interopRequireDefault(require(\"./validatePathConfig\"));\nfunction _interopRequireWildcard(e, t) {\n  if (\"function\" == typeof WeakMap) var r = new WeakMap(),\n    n = new WeakMap();\n  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {\n    if (!t && e && e.__esModule) return e;\n    var o,\n      i,\n      f = {\n        __proto__: null,\n        \"default\": e\n      };\n    if (null === e || \"object\" != _typeof3(e) && \"function\" != typeof e) return f;\n    if (o = t ? n : r) {\n      if (o.has(e)) return o.get(e);\n      o.set(e, f);\n    }\n    for (var _t2 in e) \"default\" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]);\n    return f;\n  })(e, t);\n}\nfunction _createForOfIteratorHelper(r, e) {\n  var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (!t) {\n    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) {\n      t && (r = t);\n      var _n = 0,\n        F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          return _n >= r.length ? {\n            done: !0\n          } : {\n            done: !1,\n            value: r[_n++]\n          };\n        },\n        e: function e(r) {\n          throw r;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var o,\n    a = !0,\n    u = !1;\n  return {\n    s: function s() {\n      t = t.call(r);\n    },\n    n: function n() {\n      var r = t.next();\n      return a = r.done, r;\n    },\n    e: function e(r) {\n      u = !0, o = r;\n    },\n    f: function f() {\n      try {\n        a || null == t[\"return\"] || t[\"return\"]();\n      } finally {\n        if (u) throw o;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      (0, _defineProperty2[\"default\"])(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction getStateFromPath(path, options) {\n  var _ref;\n  if (options) {\n    (0, _validatePathConfig[\"default\"])(options);\n  }\n  var initialRoutes = [];\n  if (options !== null && options !== void 0 && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  var screens = options === null || options === void 0 ? void 0 : options.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : \"\".concat(remaining, \"/\");\n  if (screens === undefined) {\n    var _routes = remaining.split('/').filter(Boolean).map(function (segment) {\n      var name = decodeURIComponent(segment);\n      return {\n        name: name\n      };\n    });\n    if (_routes.length) {\n      return createNestedStateObject(path, _routes, initialRoutes);\n    }\n    return undefined;\n  }\n  var configs = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2[\"default\"])(Object.keys(screens).map(function (key) {\n    return _createNormalizedConfigs(key, screens, [], initialRoutes, []);\n  }))).sort(function (a, b) {\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n    for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      if (aParts[i] == null) {\n        return 1;\n      }\n      if (bParts[i] == null) {\n        return -1;\n      }\n      var aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      var bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n      if (aWildCard) {\n        return 1;\n      }\n      if (bWildCard) {\n        return -1;\n      }\n    }\n    return bParts.length - aParts.length;\n  });\n  configs.reduce(function (acc, config) {\n    if (acc[config.pattern]) {\n      var a = acc[config.pattern].routeNames;\n      var b = config.routeNames;\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n      if (!intersects) {\n        throw new Error(\"Found conflicting screens with the same pattern. The pattern '\".concat(config.pattern, \"' resolves to both '\").concat(a.join(' > '), \"' and '\").concat(b.join(' > '), \"'. Patterns must be unique and cannot resolve to more than one screen.\"));\n      }\n    }\n    return Object.assign(acc, (0, _defineProperty2[\"default\"])({}, config.pattern, config));\n  }, {});\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) !== null && _configs$find !== void 0 && _configs$find.path);\n      });\n    });\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(function (name) {\n        return {\n          name: name\n        };\n      }), initialRoutes, configs);\n    }\n    return undefined;\n  }\n  var result;\n  var current;\n  var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n      return _objectSpread(_objectSpread({}, c), {}, {\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n      });\n    })),\n    routes = _matchAgainstConfigs.routes,\n    remainingPath = _matchAgainstConfigs.remainingPath;\n  if (routes !== undefined) {\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nvar joinPaths = function joinPaths() {\n  var _ref2;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2[\"default\"])(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n  var _iterator = _createForOfIteratorHelper(configs),\n    _step;\n  try {\n    var _loop = function _loop() {\n        var config = _step.value;\n        if (!config.regex) {\n          return 0;\n        }\n        var match = remainingPath.match(config.regex);\n        if (match) {\n          var matchResult = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').reduce(function (acc, p, index) {\n            if (!p.startsWith(':')) {\n              return acc;\n            }\n            acc.pos += 1;\n            var decodedParamSegment = decodeURIComponent(match[(acc.pos + 1) * 2].replace(/\\/$/, ''));\n            Object.assign(acc.matchedParams, (0, _defineProperty2[\"default\"])({}, p, Object.assign(acc.matchedParams[p] || {}, (0, _defineProperty2[\"default\"])({}, index, decodedParamSegment))));\n            return acc;\n          }, {\n            pos: -1,\n            matchedParams: {}\n          });\n          var matchedParams = matchResult.matchedParams || {};\n          routes = config.routeNames.map(function (name) {\n            var _routeConfig$pattern$;\n            var routeConfig = configs.find(function (c) {\n              return c.screen === name && config.pattern.startsWith(c.pattern);\n            });\n            var normalizedPath = routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.path.split('/').filter(Boolean).join('/');\n            var numInitialSegments = routeConfig === null || routeConfig === void 0 ? void 0 : (_routeConfig$pattern$ = routeConfig.pattern.replace(new RegExp(\"\".concat((0, _escapeStringRegexp[\"default\"])(normalizedPath), \"$\")), '')) === null || _routeConfig$pattern$ === void 0 ? void 0 : _routeConfig$pattern$.split('/').length;\n            var params = normalizedPath === null || normalizedPath === void 0 ? void 0 : normalizedPath.split('/').reduce(function (acc, p, index) {\n              var _matchedParams$p;\n              if (!p.startsWith(':')) {\n                return acc;\n              }\n              var offset = numInitialSegments ? numInitialSegments - 1 : 0;\n              var value = (_matchedParams$p = matchedParams[p]) === null || _matchedParams$p === void 0 ? void 0 : _matchedParams$p[index + offset];\n              if (value) {\n                var _routeConfig$parse;\n                var key = p.replace(/^:/, '').replace(/\\?$/, '');\n                acc[key] = routeConfig !== null && routeConfig !== void 0 && (_routeConfig$parse = routeConfig.parse) !== null && _routeConfig$parse !== void 0 && _routeConfig$parse[key] ? routeConfig.parse[key](value) : value;\n              }\n              return acc;\n            }, {});\n            if (params && Object.keys(params).length) {\n              return {\n                name: name,\n                params: params\n              };\n            }\n            return {\n              name: name\n            };\n          });\n          remainingPath = remainingPath.replace(match[1], '');\n          return 1;\n        }\n      },\n      _config$pattern,\n      _ret;\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _ret = _loop();\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return {\n    routes: routes,\n    remainingPath: remainingPath\n  };\n};\nvar _createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig) {\n  var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var initials = arguments.length > 3 ? arguments[3] : undefined;\n  var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  var config = routeConfig[screen];\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if ((0, _typeof2[\"default\"])(config) === 'object') {\n    var _pattern;\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.parse));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens: parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var result = _createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, (0, _toConsumableArray2[\"default\"])(parentScreens), _pattern !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push.apply(configs, (0, _toConsumableArray2[\"default\"])(result));\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nvar createConfigItem = function createConfigItem(screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(\"^(\".concat(pattern.split('/').map(function (it) {\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\".concat(it.endsWith('?') ? '?' : '', \")\");\n    }\n    return \"\".concat(it === '*' ? '.*' : (0, _escapeStringRegexp[\"default\"])(it), \"\\\\/\");\n  }).join(''), \")\")) : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: (0, _toConsumableArray2[\"default\"])(routeNames),\n    parse: parse\n  };\n};\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  var _iterator2 = _createForOfIteratorHelper(flatConfig),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var config = _step2.value;\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return undefined;\n};\nvar findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n  var _iterator3 = _createForOfIteratorHelper(initialRoutes),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var config = _step3.value;\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return undefined;\n};\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, _objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [_objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\nvar createNestedStateObject = function createNestedStateObject(path, routes, initialRoutes, flatConfig) {\n  var state;\n  var route = routes.shift();\n  var parentScreens = [];\n  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    var nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = (0, _findFocusedRoute[\"default\"])(state);\n  route.path = path;\n  var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n  if (params) {\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n  return state;\n};\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"names":["_escapeStringRegexp","_interopRequireDefault","require","queryString","_interopRequireWildcard","_findFocusedRoute","_validatePathConfig","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","_typeof3","has","get","set","_t2","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_createForOfIteratorHelper","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","done","value","TypeError","a","u","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","ownKeys","keys","getOwnPropertySymbols","filter","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","getStateFromPath","path","options","_ref","initialRoutes","initialRouteName","parentScreens","screens","remaining","replace","endsWith","concat","undefined","_routes","split","Boolean","map","segment","decodeURIComponent","createNestedStateObject","configs","_toConsumableArray2","key","_createNormalizedConfigs","sort","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","match","find","_configs$find","c","screen","result","current","_matchAgainstConfigs","matchAgainstConfigs","regex","RegExp","source","routes","remainingPath","joinPaths","_ref2","_len","paths","_key","p","_iterator","_step","_loop","matchResult","_config$pattern","index","pos","decodedParamSegment","matchedParams","_routeConfig$pattern$","routeConfig","normalizedPath","numInitialSegments","params","_matchedParams$p","offset","_routeConfig$parse","parse","_ret","err","createNormalizedConfigs","initials","parentPattern","createConfigItem","_typeof2","_pattern","exact","nestedConfig","pop","findParseConfigForRoute","routeName","flatConfig","_iterator2","_step2","findInitialRoute","_iterator3","_step3","sameParents","createStateObject","initialRoute","route","isEmpty","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query"],"sources":["C:\\Users\\vanma\\StudioProjects\\ToneShift\\toneshift-frontend\\node_modules\\@react-navigation\\core\\src\\getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchResult = config.pattern?.split('/').reduce<{\n        pos: number; // Position of the current path param segment in the path (e.g in pattern `a/:b/:c`, `:a` is 0 and `:b` is 1)\n        matchedParams: Record<string, Record<string, string>>; // The extracted params\n      }>(\n        (acc, p, index) => {\n          if (!p.startsWith(':')) {\n            return acc;\n          }\n\n          // Path parameter so increment position for the segment\n          acc.pos += 1;\n\n          const decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match![(acc.pos + 1) * 2]\n              // Remove trailing slash\n              .replace(/\\/$/, '')\n          );\n\n          Object.assign(acc.matchedParams, {\n            [p]: Object.assign(acc.matchedParams[p] || {}, {\n              [index]: decodedParamSegment,\n            }),\n          });\n\n          return acc;\n        },\n        { pos: -1, matchedParams: {} }\n      );\n\n      const matchedParams = matchResult.matchedParams || {};\n\n      routes = config.routeNames.map((name) => {\n        const routeConfig = configs.find((c) => {\n          // Check matching name AND pattern in case same screen is used at different levels in config\n          return c.screen === name && config.pattern.startsWith(c.pattern);\n        });\n\n        // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n        const normalizedPath = routeConfig?.path\n          .split('/')\n          .filter(Boolean)\n          .join('/');\n\n        // Get the number of segments in the initial pattern\n        const numInitialSegments = routeConfig?.pattern\n          // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n          .replace(new RegExp(`${escape(normalizedPath!)}$`), '')\n          ?.split('/').length;\n\n        const params = normalizedPath\n          ?.split('/')\n          .reduce<Record<string, unknown>>((acc, p, index) => {\n            if (!p.startsWith(':')) {\n              return acc;\n            }\n\n            // Get the real index of the path parameter in the matched path\n            // by offsetting by the number of segments in the initial pattern\n            const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n            const value = matchedParams[p]?.[index + offset];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = routeConfig?.parse?.[key]\n                ? routeConfig.parse[key](value)\n                : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === 'string'\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}