{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.IconAdornment = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\nvar _View = _interopRequireDefault(require(\"react-native-web/dist/exports/View\"));\nvar _utils = require(\"./utils\");\nvar _theming = require(\"../../../core/theming\");\nvar _IconButton = _interopRequireDefault(require(\"../../IconButton/IconButton\"));\nvar _constants = require(\"../constants\");\nvar _helpers = require(\"../helpers\");\nvar _excluded = [\"icon\", \"onPress\", \"forceTextInputFocus\", \"color\", \"theme\", \"rippleColor\"];\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nvar StyleContext = _react[\"default\"].createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: function forceFocus() {},\n  testID: ''\n});\nvar IconAdornment = exports.IconAdornment = function IconAdornment(_ref) {\n  var icon = _ref.icon,\n    topPosition = _ref.topPosition,\n    side = _ref.side,\n    isTextInputFocused = _ref.isTextInputFocused,\n    forceFocus = _ref.forceFocus,\n    testID = _ref.testID,\n    themeOverrides = _ref.theme,\n    disabled = _ref.disabled;\n  var _useInternalTheme = (0, _theming.useInternalTheme)(themeOverrides),\n    isV3 = _useInternalTheme.isV3;\n  var _getConstants = (0, _helpers.getConstants)(isV3),\n    ICON_OFFSET = _getConstants.ICON_OFFSET;\n  var style = (0, _defineProperty2[\"default\"])({\n    top: topPosition\n  }, side, ICON_OFFSET);\n  var contextState = {\n    style: style,\n    isTextInputFocused: isTextInputFocused,\n    forceFocus: forceFocus,\n    testID: testID,\n    disabled: disabled\n  };\n  return _react[\"default\"].createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\nvar TextInputIcon = function TextInputIcon(_ref2) {\n  var icon = _ref2.icon,\n    onPress = _ref2.onPress,\n    _ref2$forceTextInputF = _ref2.forceTextInputFocus,\n    forceTextInputFocus = _ref2$forceTextInputF === void 0 ? true : _ref2$forceTextInputF,\n    customColor = _ref2.color,\n    themeOverrides = _ref2.theme,\n    rippleColor = _ref2.rippleColor,\n    rest = (0, _objectWithoutProperties2[\"default\"])(_ref2, _excluded);\n  var _React$useContext = _react[\"default\"].useContext(StyleContext),\n    style = _React$useContext.style,\n    isTextInputFocused = _React$useContext.isTextInputFocused,\n    forceFocus = _React$useContext.forceFocus,\n    testID = _React$useContext.testID,\n    disabled = _React$useContext.disabled;\n  var onPressWithFocusControl = _react[\"default\"].useCallback(function (e) {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress === null || onPress === void 0 || onPress(e);\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n  var theme = (0, _theming.useInternalTheme)(themeOverrides);\n  var iconColor = (0, _utils.getIconColor)({\n    theme: theme,\n    disabled: disabled,\n    isTextInputFocused: isTextInputFocused,\n    customColor: customColor\n  });\n  return _react[\"default\"].createElement(_View[\"default\"], {\n    style: [styles.container, style]\n  }, _react[\"default\"].createElement(_IconButton[\"default\"], _extends({\n    icon: icon,\n    style: styles.iconButton,\n    size: _constants.ICON_SIZE,\n    onPress: onPressWithFocusControl,\n    iconColor: iconColor,\n    testID: testID,\n    theme: themeOverrides,\n    rippleColor: rippleColor\n  }, rest)));\n};\nTextInputIcon.displayName = 'TextInput.Icon';\nvar styles = _StyleSheet[\"default\"].create({\n  container: {\n    position: 'absolute',\n    width: _constants.ICON_SIZE,\n    height: _constants.ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\nvar _default = exports[\"default\"] = TextInputIcon;","map":{"version":3,"names":["_react","_interopRequireDefault","require","_StyleSheet","_View","_utils","_theming","_IconButton","_constants","_helpers","_excluded","StyleContext","createContext","style","isTextInputFocused","forceFocus","testID","IconAdornment","exports","_ref","icon","topPosition","side","themeOverrides","theme","disabled","_useInternalTheme","useInternalTheme","isV3","_getConstants","getConstants","ICON_OFFSET","_defineProperty2","top","contextState","createElement","Provider","value","TextInputIcon","_ref2","onPress","_ref2$forceTextInputF","forceTextInputFocus","customColor","color","rippleColor","rest","_objectWithoutProperties2","_React$useContext","useContext","onPressWithFocusControl","useCallback","e","iconColor","getIconColor","styles","container","_extends","iconButton","size","ICON_SIZE","displayName","create","position","width","height","justifyContent","alignItems","margin","_default"],"sources":["C:\\Users\\vanma\\StudioProjects\\ToneShift\\toneshift-frontend\\node_modules\\react-native-paper\\src\\components\\TextInput\\Adornment\\TextInputIcon.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  ColorValue,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { getIconColor } from './utils';\nimport { useInternalTheme } from '../../../core/theming';\nimport type { $Omit, ThemeProp } from '../../../types';\nimport type { IconSource } from '../../Icon';\nimport IconButton from '../../IconButton/IconButton';\nimport { ICON_SIZE } from '../constants';\nimport { getConstants } from '../helpers';\n\nexport type Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color' | 'iconColor'\n> & {\n  /**\n   * @renamed Renamed from 'name' to 'icon` in v5.x\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n  testID: string;\n  disabled?: boolean;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n  testID: '',\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n    theme?: ThemeProp;\n    disabled?: boolean;\n  } & Omit<StyleContextType, 'style'>\n> = ({\n  icon,\n  topPosition,\n  side,\n  isTextInputFocused,\n  forceFocus,\n  testID,\n  theme: themeOverrides,\n  disabled,\n}) => {\n  const { isV3 } = useInternalTheme(themeOverrides);\n  const { ICON_OFFSET } = getConstants(isV3);\n\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = {\n    style,\n    isTextInputFocused,\n    forceFocus,\n    testID,\n    disabled,\n  };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon icon=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  icon,\n  onPress,\n  forceTextInputFocus = true,\n  color: customColor,\n  theme: themeOverrides,\n  rippleColor,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus, testID, disabled } =\n    React.useContext(StyleContext);\n\n  const onPressWithFocusControl = React.useCallback(\n    (e: GestureResponderEvent) => {\n      if (forceTextInputFocus && !isTextInputFocused) {\n        forceFocus();\n      }\n\n      onPress?.(e);\n    },\n    [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]\n  );\n\n  const theme = useInternalTheme(themeOverrides);\n\n  const iconColor = getIconColor({\n    theme,\n    disabled,\n    isTextInputFocused,\n    customColor,\n  });\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={icon}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        iconColor={iconColor}\n        testID={testID}\n        theme={themeOverrides}\n        rippleColor={rippleColor}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}