{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/app/utils/ThemeContext.js\",\n  _this = this;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { AuthContext } from './auth';\nimport { lightTheme, darkTheme } from './theme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var ThemeContext = createContext({\n  theme: lightTheme,\n  isDarkMode: false,\n  toggleTheme: function toggleTheme() {}\n});\nexport var ThemeProvider = function ThemeProvider(_ref) {\n  var children = _ref.children;\n  var _useContext = useContext(AuthContext),\n    userData = _useContext.userData,\n    updateUserData = _useContext.updateUserData;\n  var deviceColorScheme = useColorScheme();\n  var _useState = useState(function () {\n      var _userData$preferences;\n      if ((userData == null ? void 0 : (_userData$preferences = userData.preferences) == null ? void 0 : _userData$preferences.darkMode) !== undefined) {\n        return userData.preferences.darkMode;\n      }\n      return deviceColorScheme === 'dark';\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    isDarkMode = _useState2[0],\n    setIsDarkMode = _useState2[1];\n  var theme = isDarkMode ? darkTheme : lightTheme;\n  var toggleTheme = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var newMode = !isDarkMode;\n      setIsDarkMode(newMode);\n      if (userData) {\n        var updatedPreferences = _objectSpread(_objectSpread({}, userData.preferences), {}, {\n          darkMode: newMode\n        });\n        updateUserData({\n          preferences: updatedPreferences\n        });\n      }\n    });\n    return function toggleTheme() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    var _userData$preferences2;\n    if ((userData == null ? void 0 : (_userData$preferences2 = userData.preferences) == null ? void 0 : _userData$preferences2.darkMode) !== undefined) {\n      setIsDarkMode(userData.preferences.darkMode);\n    }\n  }, [userData]);\n  return _jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      isDarkMode: isDarkMode,\n      toggleTheme: toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, _this);\n};\nexport var useTheme = function useTheme() {\n  return useContext(ThemeContext);\n};","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useColorScheme","AuthContext","lightTheme","darkTheme","jsxDEV","_jsxDEV","ThemeContext","theme","isDarkMode","toggleTheme","ThemeProvider","_ref","children","_useContext","userData","updateUserData","deviceColorScheme","_useState","_userData$preferences","preferences","darkMode","undefined","_useState2","_slicedToArray","setIsDarkMode","_ref2","_asyncToGenerator","newMode","updatedPreferences","_objectSpread","apply","arguments","_userData$preferences2","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_this","useTheme"],"sources":["/app/utils/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { useColorScheme } from 'react-native';\r\nimport { AuthContext } from './auth';\r\nimport { lightTheme, darkTheme } from './theme';\r\n\r\nexport const ThemeContext = createContext({\r\n  theme: lightTheme,\r\n  isDarkMode: false,\r\n  toggleTheme: () => {},\r\n});\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const { userData, updateUserData } = useContext(AuthContext);\r\n  const deviceColorScheme = useColorScheme();\r\n  \r\n  // Initialize with user preference or device setting\r\n  const [isDarkMode, setIsDarkMode] = useState(() => {\r\n    if (userData?.preferences?.darkMode !== undefined) {\r\n      return userData.preferences.darkMode;\r\n    }\r\n    return deviceColorScheme === 'dark';\r\n  });\r\n\r\n  const theme = isDarkMode ? darkTheme : lightTheme;\r\n\r\n  const toggleTheme = async () => {\r\n    const newMode = !isDarkMode;\r\n    setIsDarkMode(newMode);\r\n    \r\n    // Save preference if user is logged in\r\n    if (userData) {\r\n      const updatedPreferences = {\r\n        ...userData.preferences,\r\n        darkMode: newMode,\r\n      };\r\n      \r\n      updateUserData({ \r\n        preferences: updatedPreferences \r\n      });\r\n    }\r\n  };\r\n\r\n  // Update theme when user data changes\r\n  useEffect(() => {\r\n    if (userData?.preferences?.darkMode !== undefined) {\r\n      setIsDarkMode(userData.preferences.darkMode);\r\n    }\r\n  }, [userData]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, isDarkMode, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => useContext(ThemeContext);"],"mappings":";;;;;;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAAC,OAAAC,cAAA;AAE9E,SAASC,WAAW,QAAQ,QAAQ;AACpC,SAASC,UAAU,EAAEC,SAAS,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,OAAO,IAAMC,YAAY,GAAGV,aAAa,CAAC;EACxCW,KAAK,EAAEL,UAAU;EACjBM,UAAU,EAAE,KAAK;EACjBC,WAAW,EAAE,SAAbA,WAAWA,CAAA,EAAQ,CAAC;AACtB,CAAC,CAAC;AAEF,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EACtC,IAAAC,WAAA,GAAqCd,UAAU,CAACE,WAAW,CAAC;IAApDa,QAAQ,GAAAD,WAAA,CAARC,QAAQ;IAAEC,cAAc,GAAAF,WAAA,CAAdE,cAAc;EAChC,IAAMC,iBAAiB,GAAGhB,cAAc,CAAC,CAAC;EAG1C,IAAAiB,SAAA,GAAoCpB,QAAQ,CAAC,YAAM;MAAA,IAAAqB,qBAAA;MACjD,IAAI,CAAAJ,QAAQ,qBAAAI,qBAAA,GAARJ,QAAQ,CAAEK,WAAW,qBAArBD,qBAAA,CAAuBE,QAAQ,MAAKC,SAAS,EAAE;QACjD,OAAOP,QAAQ,CAACK,WAAW,CAACC,QAAQ;MACtC;MACA,OAAOJ,iBAAiB,KAAK,MAAM;IACrC,CAAC,CAAC;IAAAM,UAAA,GAAAC,cAAA,CAAAN,SAAA;IALKT,UAAU,GAAAc,UAAA;IAAEE,aAAa,GAAAF,UAAA;EAOhC,IAAMf,KAAK,GAAGC,UAAU,GAAGL,SAAS,GAAGD,UAAU;EAEjD,IAAMO,WAAW;IAAA,IAAAgB,KAAA,GAAAC,iBAAA,CAAG,aAAY;MAC9B,IAAMC,OAAO,GAAG,CAACnB,UAAU;MAC3BgB,aAAa,CAACG,OAAO,CAAC;MAGtB,IAAIb,QAAQ,EAAE;QACZ,IAAMc,kBAAkB,GAAAC,aAAA,CAAAA,aAAA,KACnBf,QAAQ,CAACK,WAAW;UACvBC,QAAQ,EAAEO;QAAO,EAClB;QAEDZ,cAAc,CAAC;UACbI,WAAW,EAAES;QACf,CAAC,CAAC;MACJ;IACF,CAAC;IAAA,gBAfKnB,WAAWA,CAAA;MAAA,OAAAgB,KAAA,CAAAK,KAAA,OAAAC,SAAA;IAAA;EAAA,GAehB;EAGDjC,SAAS,CAAC,YAAM;IAAA,IAAAkC,sBAAA;IACd,IAAI,CAAAlB,QAAQ,qBAAAkB,sBAAA,GAARlB,QAAQ,CAAEK,WAAW,qBAArBa,sBAAA,CAAuBZ,QAAQ,MAAKC,SAAS,EAAE;MACjDG,aAAa,CAACV,QAAQ,CAACK,WAAW,CAACC,QAAQ,CAAC;IAC9C;EACF,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EAEd,OACET,OAAA,CAACC,YAAY,CAAC2B,QAAQ;IAACC,KAAK,EAAE;MAAE3B,KAAK,EAALA,KAAK;MAAEC,UAAU,EAAVA,UAAU;MAAEC,WAAW,EAAXA;IAAY,CAAE;IAAAG,QAAA,EAC9DA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,GAAAC,KACY,CAAC;AAE5B,CAAC;AAED,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAA;EAAA,OAASzC,UAAU,CAACO,YAAY,CAAC;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}