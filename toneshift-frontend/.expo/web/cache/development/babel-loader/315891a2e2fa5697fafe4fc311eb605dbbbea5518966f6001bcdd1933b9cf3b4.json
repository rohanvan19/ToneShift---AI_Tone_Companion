{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nvar api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(function () {\n  var _ref = _asyncToGenerator(function* (config) {\n    var token = yield AsyncStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  return Promise.reject(error);\n});\nexport var authApi = {\n  register: function register(userData) {\n    return api.post('/users/register', userData);\n  },\n  login: function login(credentials) {\n    return api.post('/users/login', credentials);\n  },\n  getProfile: function getProfile() {\n    return api.get('/users/profile');\n  },\n  updateProfile: function updateProfile(data) {\n    return api.put('/users/profile', data);\n  }\n};\nexport var conversationApi = {\n  getAll: function getAll() {\n    return api.get('/conversations');\n  },\n  getById: function getById(id) {\n    return api.get(`/conversations/${id}`);\n  },\n  create: function create(data) {\n    return api.post('/conversations', data);\n  },\n  update: function update(id, data) {\n    return api.put(`/conversations/${id}`, data);\n  },\n  delete: function _delete(id) {\n    return api.delete(`/conversations/${id}`);\n  },\n  addMessage: function addMessage(id, data) {\n    return api.post(`/conversations/${id}/messages`, data);\n  }\n};\nexport var relationshipApi = {\n  getAll: function getAll() {\n    return api.get('/relationships');\n  },\n  getById: function getById(id) {\n    return api.get(`/relationships/${id}`);\n  },\n  create: function create(data) {\n    return api.post('/relationships', data);\n  },\n  update: function update(id, data) {\n    return api.put(`/relationships/${id}`, data);\n  },\n  delete: function _delete(id) {\n    return api.delete(`/relationships/${id}`);\n  }\n};\nexport var toneApi = {\n  getAll: function getAll() {\n    return api.get('/tones');\n  },\n  create: function create(data) {\n    return api.post('/tones', data);\n  },\n  update: function update(id, data) {\n    return api.put(`/tones/${id}`, data);\n  },\n  delete: function _delete(id) {\n    return api.delete(`/tones/${id}`);\n  },\n  getPreferred: function getPreferred() {\n    return api.get('/tones/preferred');\n  },\n  updatePreferred: function updatePreferred(data) {\n    return api.put('/tones/preferred', data);\n  }\n};\nexport var responseApi = {\n  generate: function generate(data) {\n    return api.post('/responses/generate', data);\n  },\n  generateMultiple: function generateMultiple(data) {\n    return api.post('/responses/generate-multiple', data);\n  },\n  generateAndSave: function generateAndSave(data) {\n    return api.post('/responses/generate-and-save', data);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","AsyncStorage","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","_ref","_asyncToGenerator","config","token","getItem","Authorization","_x","apply","arguments","error","Promise","reject","authApi","register","userData","post","login","credentials","getProfile","get","updateProfile","data","put","conversationApi","getAll","getById","id","update","delete","addMessage","relationshipApi","toneApi","getPreferred","updatePreferred","responseApi","generate","generateMultiple","generateAndSave"],"sources":["C:/Users/vanma/StudioProjects/ToneShift/toneshift-frontend/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n// Base URL for API requests\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to include token in headers\r\napi.interceptors.request.use(\r\n  async (config) => {\r\n    const token = await AsyncStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nexport const authApi = {\r\n  register: (userData) => api.post('/users/register', userData),\r\n  login: (credentials) => api.post('/users/login', credentials),\r\n  getProfile: () => api.get('/users/profile'),\r\n  updateProfile: (data) => api.put('/users/profile', data),\r\n};\r\n\r\nexport const conversationApi = {\r\n  getAll: () => api.get('/conversations'),\r\n  getById: (id) => api.get(`/conversations/${id}`),\r\n  create: (data) => api.post('/conversations', data),\r\n  update: (id, data) => api.put(`/conversations/${id}`, data),\r\n  delete: (id) => api.delete(`/conversations/${id}`),\r\n  addMessage: (id, data) => api.post(`/conversations/${id}/messages`, data),\r\n};\r\n\r\nexport const relationshipApi = {\r\n  getAll: () => api.get('/relationships'),\r\n  getById: (id) => api.get(`/relationships/${id}`),\r\n  create: (data) => api.post('/relationships', data),\r\n  update: (id, data) => api.put(`/relationships/${id}`, data),\r\n  delete: (id) => api.delete(`/relationships/${id}`),\r\n};\r\n\r\nexport const toneApi = {\r\n  getAll: () => api.get('/tones'),\r\n  create: (data) => api.post('/tones', data),\r\n  update: (id, data) => api.put(`/tones/${id}`, data),\r\n  delete: (id) => api.delete(`/tones/${id}`),\r\n  getPreferred: () => api.get('/tones/preferred'),\r\n  updatePreferred: (data) => api.put('/tones/preferred', data),\r\n};\r\n\r\nexport const responseApi = {\r\n  generate: (data) => api.post('/responses/generate', data),\r\n  generateMultiple: (data) => api.post('/responses/generate-multiple', data),\r\n  generateAndSave: (data) => api.post('/responses/generate-and-save', data),\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}