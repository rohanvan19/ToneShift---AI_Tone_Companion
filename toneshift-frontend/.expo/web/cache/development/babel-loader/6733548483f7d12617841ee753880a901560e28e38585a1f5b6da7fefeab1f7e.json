{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = useLinkProps;\nvar _core = require(\"@react-navigation/core\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _Platform = _interopRequireDefault(require(\"react-native-web/dist/exports/Platform\"));\nvar _LinkingContext = _interopRequireDefault(require(\"./LinkingContext\"));\nvar _useLinkTo = _interopRequireDefault(require(\"./useLinkTo\"));\nfunction _interopRequireWildcard(e, t) {\n  if (\"function\" == typeof WeakMap) var r = new WeakMap(),\n    n = new WeakMap();\n  return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {\n    if (!t && e && e.__esModule) return e;\n    var o,\n      i,\n      f = {\n        __proto__: null,\n        \"default\": e\n      };\n    if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return f;\n    if (o = t ? n : r) {\n      if (o.has(e)) return o.get(e);\n      o.set(e, f);\n    }\n    for (var _t2 in e) \"default\" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]);\n    return f;\n  })(e, t);\n}\nvar _getStateFromParams = function getStateFromParams(params) {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        state: params.screen ? _getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n  return undefined;\n};\nfunction useLinkProps(_ref) {\n  var _ref2;\n  var to = _ref.to,\n    action = _ref.action;\n  var root = React.useContext(_core.NavigationContainerRefContext);\n  var navigation = React.useContext(_core.NavigationHelpersContext);\n  var _React$useContext = React.useContext(_LinkingContext[\"default\"]),\n    options = _React$useContext.options;\n  var linkTo = (0, _useLinkTo[\"default\"])();\n  var onPress = function onPress(e) {\n    var _e$currentTarget;\n    var shouldHandle = false;\n    if (_Platform[\"default\"].OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target)) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n  var getPathFromStateHelper = (_ref2 = options === null || options === void 0 ? void 0 : options.getPathFromState) !== null && _ref2 !== void 0 ? _ref2 : _core.getPathFromState;\n  var href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      params: to.params,\n      state: _getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href: href,\n    accessibilityRole: 'link',\n    onPress: onPress\n  };\n}","map":{"version":3,"names":["_core","require","React","_interopRequireWildcard","_Platform","_interopRequireDefault","_LinkingContext","_useLinkTo","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","_typeof","has","get","set","_t2","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_getStateFromParams","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","_ref","_ref2","to","action","root","useContext","NavigationContainerRefContext","navigation","NavigationHelpersContext","_React$useContext","options","linkTo","onPress","_e$currentTarget","shouldHandle","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","getPathFromState","href","config","accessibilityRole"],"sources":["C:\\Users\\vanma\\StudioProjects\\ToneShift\\toneshift-frontend\\node_modules\\@react-navigation\\native\\src\\useLinkProps.tsx"],"sourcesContent":["import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}