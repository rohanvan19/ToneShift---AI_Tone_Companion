{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.TextInputAffix = exports.AffixAdornment = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _Animated = _interopRequireDefault(require(\"react-native-web/dist/exports/Animated\"));\nvar _Pressable = _interopRequireDefault(require(\"react-native-web/dist/exports/Pressable\"));\nvar _StyleSheet = _interopRequireDefault(require(\"react-native-web/dist/exports/StyleSheet\"));\nvar _Text = _interopRequireDefault(require(\"react-native-web/dist/exports/Text\"));\nvar _enums = require(\"./enums\");\nvar _utils = require(\"./utils\");\nvar _theming = require(\"../../../core/theming\");\nvar _helpers = require(\"../helpers\");\nvar AffixContext = _react[\"default\"].createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: _enums.AdornmentSide.Left\n});\nvar AffixAdornment = exports.AffixAdornment = function AffixAdornment(_ref) {\n  var affix = _ref.affix,\n    side = _ref.side,\n    textStyle = _ref.textStyle,\n    topPosition = _ref.topPosition,\n    onLayout = _ref.onLayout,\n    visible = _ref.visible,\n    paddingHorizontal = _ref.paddingHorizontal,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,\n    testID = _ref.testID,\n    disabled = _ref.disabled;\n  return _react[\"default\"].createElement(AffixContext.Provider, {\n    value: {\n      side: side,\n      textStyle: textStyle,\n      topPosition: topPosition,\n      onLayout: onLayout,\n      visible: visible,\n      paddingHorizontal: paddingHorizontal,\n      maxFontSizeMultiplier: maxFontSizeMultiplier,\n      testID: testID,\n      disabled: disabled\n    }\n  }, affix);\n};\nvar TextInputAffix = exports.TextInputAffix = function TextInputAffix(_ref2) {\n  var text = _ref2.text,\n    labelStyle = _ref2.textStyle,\n    themeOverrides = _ref2.theme,\n    onTextLayout = _ref2.onLayout,\n    onPress = _ref2.onPress,\n    _ref2$accessibilityLa = _ref2.accessibilityLabel,\n    accessibilityLabel = _ref2$accessibilityLa === void 0 ? text : _ref2$accessibilityLa;\n  var theme = (0, _theming.useInternalTheme)(themeOverrides);\n  var _getConstants = (0, _helpers.getConstants)(theme.isV3),\n    AFFIX_OFFSET = _getConstants.AFFIX_OFFSET;\n  var _React$useContext = _react[\"default\"].useContext(AffixContext),\n    textStyle = _React$useContext.textStyle,\n    onLayout = _React$useContext.onLayout,\n    topPosition = _React$useContext.topPosition,\n    side = _React$useContext.side,\n    visible = _React$useContext.visible,\n    paddingHorizontal = _React$useContext.paddingHorizontal,\n    maxFontSizeMultiplier = _React$useContext.maxFontSizeMultiplier,\n    testID = _React$useContext.testID,\n    disabled = _React$useContext.disabled;\n  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n  var style = (0, _defineProperty2[\"default\"])({\n    top: topPosition\n  }, side, offset);\n  var textColor = (0, _utils.getTextColor)({\n    theme: theme,\n    disabled: disabled\n  });\n  var content = _react[\"default\"].createElement(_Text[\"default\"], {\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle],\n    onLayout: onTextLayout,\n    testID: \"\".concat(testID, \"-text\")\n  }, text);\n  return _react[\"default\"].createElement(_Animated[\"default\"].View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout,\n    testID: testID\n  }, onPress ? _react[\"default\"].createElement(_Pressable[\"default\"], {\n    onPress: onPress,\n    accessibilityRole: \"button\",\n    accessibilityLabel: accessibilityLabel\n  }, content) : content);\n};\nTextInputAffix.displayName = 'TextInput.Affix';\nvar styles = _StyleSheet[\"default\"].create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nvar _default = exports[\"default\"] = TextInputAffix;","map":{"version":3,"names":["_react","_interopRequireDefault","require","_Animated","_Pressable","_StyleSheet","_Text","_enums","_utils","_theming","_helpers","AffixContext","createContext","textStyle","fontFamily","color","topPosition","side","AdornmentSide","Left","AffixAdornment","exports","_ref","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","testID","disabled","createElement","Provider","value","TextInputAffix","_ref2","text","labelStyle","themeOverrides","theme","onTextLayout","onPress","_ref2$accessibilityLa","accessibilityLabel","useInternalTheme","_getConstants","getConstants","isV3","AFFIX_OFFSET","_React$useContext","useContext","offset","style","_defineProperty2","top","textColor","getTextColor","content","concat","View","styles","container","opacity","interpolate","inputRange","outputRange","accessibilityRole","displayName","create","position","justifyContent","alignItems","_default"],"sources":["C:\\Users\\vanma\\StudioProjects\\ToneShift\\toneshift-frontend\\node_modules\\react-native-paper\\src\\components\\TextInput\\Adornment\\TextInputAffix.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  DimensionValue,\n  GestureResponderEvent,\n  LayoutChangeEvent,\n  Pressable,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport { AdornmentSide } from './enums';\nimport { getTextColor } from './utils';\nimport { useInternalTheme } from '../../../core/theming';\nimport type { ThemeProp } from '../../../types';\nimport { getConstants } from '../helpers';\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the affix. This is read by the screen reader when the user taps the affix.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: DimensionValue;\n  maxFontSizeMultiplier?: number | undefined | null;\n  testID?: string;\n  disabled?: boolean;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n  testID,\n  disabled,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n        testID,\n        disabled,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({\n  text,\n  textStyle: labelStyle,\n  theme: themeOverrides,\n  onLayout: onTextLayout,\n  onPress,\n  accessibilityLabel = text,\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { AFFIX_OFFSET } = getConstants(theme.isV3);\n\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n    testID,\n    disabled,\n  } = React.useContext(AffixContext);\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  const textColor = getTextColor({ theme, disabled });\n\n  const content = (\n    <Text\n      maxFontSizeMultiplier={maxFontSizeMultiplier}\n      style={[{ color: textColor }, textStyle, labelStyle]}\n      onLayout={onTextLayout}\n      testID={`${testID}-text`}\n    >\n      {text}\n    </Text>\n  );\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n      testID={testID}\n    >\n      {onPress ? (\n        <Pressable\n          onPress={onPress}\n          accessibilityRole=\"button\"\n          accessibilityLabel={accessibilityLabel}\n        >\n          {content}\n        </Pressable>\n      ) : (\n        content\n      )}\n    </Animated.View>\n  );\n};\n\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default TextInputAffix;\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}