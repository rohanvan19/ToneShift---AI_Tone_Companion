{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useFonts = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = require(\"react\");\nvar _Font = require(\"./Font\");\nfunction isMapLoaded(map) {\n  if (typeof map === 'string') {\n    return (0, _Font.isLoaded)(map);\n  } else {\n    return Object.keys(map).every(function (fontFamily) {\n      return (0, _Font.isLoaded)(fontFamily);\n    });\n  }\n}\nfunction useRuntimeFonts(map) {\n  var _useState = (0, _react.useState)(isMapLoaded(map)),\n    _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n    loaded = _useState2[0],\n    setLoaded = _useState2[1];\n  var _useState3 = (0, _react.useState)(null),\n    _useState4 = (0, _slicedToArray2[\"default\"])(_useState3, 2),\n    error = _useState4[0],\n    setError = _useState4[1];\n  (0, _react.useEffect)(function () {\n    (0, _Font.loadAsync)(map).then(function () {\n      return setLoaded(true);\n    })[\"catch\"](setError);\n  }, []);\n  return [loaded, error];\n}\nfunction useStaticFonts(map) {\n  (0, _Font.loadAsync)(map);\n  return [true, null];\n}\nvar useFonts = exports.useFonts = typeof window === 'undefined' ? useStaticFonts : useRuntimeFonts;","map":{"version":3,"names":["_react","require","_Font","isMapLoaded","map","isLoaded","Object","keys","every","fontFamily","useRuntimeFonts","_useState","useState","_useState2","_slicedToArray2","loaded","setLoaded","_useState3","_useState4","error","setError","useEffect","loadAsync","then","useStaticFonts","useFonts","exports","window"],"sources":["C:\\Users\\vanma\\StudioProjects\\ToneShift\\toneshift-frontend\\node_modules\\expo-font\\src\\FontHooks.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync, isLoaded } from './Font';\nimport { FontSource } from './Font.types';\n\nfunction isMapLoaded(map: string | Record<string, FontSource>) {\n  if (typeof map === 'string') {\n    return isLoaded(map);\n  } else {\n    return Object.keys(map).every((fontFamily) => isLoaded(fontFamily));\n  }\n}\n\nfunction useRuntimeFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(\n    // For web rehydration, we need to check if the fonts are already loaded during the static render.\n    // Native will also benefit from this optimization.\n    isMapLoaded(map)\n  );\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []);\n\n  return [loaded, error];\n}\n\nfunction useStaticFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  loadAsync(map);\n  return [true, null];\n}\n\n// @needsAudit\n/**\n * ```ts\n * const [loaded, error] = useFonts({ ... });\n * ```\n * Load a map of fonts with [`loadAsync`](#loadasync). This returns a `boolean` if the fonts are\n * loaded and ready to use. It also returns an error if something went wrong, to use in development.\n *\n * > Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s. After loading the font you can\n * use the key in the `fontFamily` style prop of a `Text` element.\n *\n * @return\n * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished\n * loading.\n * - __error__ (`Error | null`) - An error encountered when loading the fonts.\n */\nexport const useFonts: (map: string | Record<string, FontSource>) => [boolean, Error | null] =\n  typeof window === 'undefined' ? useStaticFonts : useRuntimeFonts;\n"],"mappings":";;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,KAAA,GAAAD,OAAA;AAGA,SAASE,WAAWA,CAACC,GAAwC;EAC3D,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAO,IAAAF,KAAA,CAAAG,QAAQ,EAACD,GAAG,CAAC;GACrB,MAAM;IACL,OAAOE,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,CAACI,KAAK,CAAC,UAACC,UAAU;MAAA,OAAK,IAAAP,KAAA,CAAAG,QAAQ,EAACI,UAAU,CAAC;IAAA,EAAC;;AAEvE;AAEA,SAASC,eAAeA,CAACN,GAAwC;EAC/D,IAAAO,SAAA,GAA4B,IAAAX,MAAA,CAAAY,QAAQ,EAGlCT,WAAW,CAACC,GAAG,CAAC,CACjB;IAAAS,UAAA,OAAAC,eAAA,aAAAH,SAAA;IAJMI,MAAM,GAAAF,UAAA;IAAEG,SAAS,GAAAH,UAAA;EAKxB,IAAAI,UAAA,GAA0B,IAAAjB,MAAA,CAAAY,QAAQ,EAAe,IAAI,CAAC;IAAAM,UAAA,OAAAJ,eAAA,aAAAG,UAAA;IAA/CE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAEtB,IAAAlB,MAAA,CAAAqB,SAAS,EAAC,YAAK;IACb,IAAAnB,KAAA,CAAAoB,SAAS,EAAClB,GAAG,CAAC,CACXmB,IAAI,CAAC;MAAA,OAAMP,SAAS,CAAC,IAAI,CAAC;IAAA,EAAC,SACtB,CAACI,QAAQ,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACL,MAAM,EAAEI,KAAK,CAAC;AACxB;AAEA,SAASK,cAAcA,CAACpB,GAAwC;EAC9D,IAAAF,KAAA,CAAAoB,SAAS,EAAClB,GAAG,CAAC;EACd,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;AACrB;AAoBO,IAAMqB,QAAQ,GAAAC,OAAA,CAAAD,QAAA,GACnB,OAAOE,MAAM,KAAK,WAAW,GAAGH,cAAc,GAAGd,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}