{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"FontDisplay\", {\n  enumerable: true,\n  get: function get() {\n    return _Font.FontDisplay;\n  }\n});\nexports.isLoaded = isLoaded;\nexports.isLoading = isLoading;\nexports.loadAsync = loadAsync;\nexports.processFontFamily = processFontFamily;\nexports.unloadAllAsync = unloadAllAsync;\nexports.unloadAsync = unloadAsync;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _ExpoFontLoader = _interopRequireDefault(require(\"./ExpoFontLoader\"));\nvar _Font = require(\"./Font.types\");\nvar _FontLoader = require(\"./FontLoader\");\nvar _memory = require(\"./memory\");\nvar _server = require(\"./server\");\nfunction processFontFamily(fontFamily) {\n  if (!fontFamily || !(0, _FontLoader.fontFamilyNeedsScoping)(fontFamily)) {\n    return fontFamily;\n  }\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.warn(\"You started loading the font \\\"\".concat(fontFamily, \"\\\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.\"));\n      } else {\n        console.warn(\"fontFamily \\\"\".concat(fontFamily, \"\\\" is not a system font and has not been loaded through expo-font.\"));\n      }\n    }\n  }\n  return \"ExpoFont-\".concat((0, _FontLoader.getNativeFontName)(fontFamily));\n}\nfunction isLoaded(fontFamily) {\n  var _ExpoFontLoader$custo;\n  if (_expoModulesCore.Platform.OS === 'web') {\n    return fontFamily in _memory.loaded || !!_ExpoFontLoader[\"default\"].isLoaded(fontFamily);\n  }\n  return fontFamily in _memory.loaded || ((_ExpoFontLoader$custo = _ExpoFontLoader[\"default\"].customNativeFonts) === null || _ExpoFontLoader$custo === void 0 ? void 0 : _ExpoFontLoader$custo.includes(fontFamily));\n}\nfunction isLoading(fontFamily) {\n  return fontFamily in _memory.loadPromises;\n}\nfunction loadAsync(fontFamilyOrFontMap, source) {\n  var isServer = _expoModulesCore.Platform.OS === 'web' && typeof window === 'undefined';\n  if ((0, _typeof2[\"default\"])(fontFamilyOrFontMap) === 'object') {\n    if (source) {\n      return Promise.reject(new _expoModulesCore.CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided source: \".concat(source, \". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\")));\n    }\n    var fontMap = fontFamilyOrFontMap;\n    var names = Object.keys(fontMap);\n    if (isServer) {\n      names.map(function (name) {\n        return (0, _server.registerStaticFont)(name, fontMap[name]);\n      });\n      return Promise.resolve();\n    }\n    return Promise.all(names.map(function (name) {\n      return loadFontInNamespaceAsync(name, fontMap[name]);\n    })).then(function () {});\n  }\n  if (isServer) {\n    (0, _server.registerStaticFont)(fontFamilyOrFontMap, source);\n    return Promise.resolve();\n  }\n  return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\nfunction loadFontInNamespaceAsync(_x, _x2) {\n  return _loadFontInNamespaceAsync.apply(this, arguments);\n}\nfunction _loadFontInNamespaceAsync() {\n  _loadFontInNamespaceAsync = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee2(fontFamily, source) {\n    var asset;\n    return _regenerator[\"default\"].wrap(function (_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (source) {\n            _context2.next = 1;\n            break;\n          }\n          throw new _expoModulesCore.CodedError(\"ERR_FONT_SOURCE\", \"Cannot load null or undefined font source: { \\\"\".concat(fontFamily, \"\\\": \").concat(source, \" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\").concat(fontFamily, \"\\\"\"));\n        case 1:\n          if (!_memory.loaded[fontFamily]) {\n            _context2.next = 2;\n            break;\n          }\n          return _context2.abrupt(\"return\");\n        case 2:\n          if (!_memory.loadPromises.hasOwnProperty(fontFamily)) {\n            _context2.next = 3;\n            break;\n          }\n          return _context2.abrupt(\"return\", _memory.loadPromises[fontFamily]);\n        case 3:\n          asset = (0, _FontLoader.getAssetForSource)(source);\n          _memory.loadPromises[fontFamily] = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee() {\n            return _regenerator[\"default\"].wrap(function (_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  _context.next = 1;\n                  return (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n                case 1:\n                  _memory.loaded[fontFamily] = true;\n                case 2:\n                  _context.prev = 2;\n                  delete _memory.loadPromises[fontFamily];\n                  return _context.finish(2);\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee, null, [[0,, 2, 3]]);\n          }))();\n          _context2.next = 4;\n          return _memory.loadPromises[fontFamily];\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _loadFontInNamespaceAsync.apply(this, arguments);\n}\nfunction unloadAllAsync() {\n  return _unloadAllAsync.apply(this, arguments);\n}\nfunction _unloadAllAsync() {\n  _unloadAllAsync = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee3() {\n    var _i, _Object$keys, fontFamily;\n    return _regenerator[\"default\"].wrap(function (_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          if (_ExpoFontLoader[\"default\"].unloadAllAsync) {\n            _context3.next = 1;\n            break;\n          }\n          throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n        case 1:\n          if (!Object.keys(_memory.loadPromises).length) {\n            _context3.next = 2;\n            break;\n          }\n          throw new _expoModulesCore.CodedError(\"ERR_UNLOAD\", \"Cannot unload fonts while they're still loading: \".concat(Object.keys(_memory.loadPromises).join(', ')));\n        case 2:\n          for (_i = 0, _Object$keys = Object.keys(_memory.loaded); _i < _Object$keys.length; _i++) {\n            fontFamily = _Object$keys[_i];\n            delete _memory.loaded[fontFamily];\n          }\n          _context3.next = 3;\n          return _ExpoFontLoader[\"default\"].unloadAllAsync();\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _unloadAllAsync.apply(this, arguments);\n}\nfunction unloadAsync(_x3, _x4) {\n  return _unloadAsync.apply(this, arguments);\n}\nfunction _unloadAsync() {\n  _unloadAsync = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee4(fontFamilyOrFontMap, options) {\n    var fontMap, names;\n    return _regenerator[\"default\"].wrap(function (_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          if (_ExpoFontLoader[\"default\"].unloadAsync) {\n            _context4.next = 1;\n            break;\n          }\n          throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n        case 1:\n          if (!((0, _typeof2[\"default\"])(fontFamilyOrFontMap) === 'object')) {\n            _context4.next = 4;\n            break;\n          }\n          if (!options) {\n            _context4.next = 2;\n            break;\n          }\n          throw new _expoModulesCore.CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided options: \".concat(options, \". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\"));\n        case 2:\n          fontMap = fontFamilyOrFontMap;\n          names = Object.keys(fontMap);\n          _context4.next = 3;\n          return Promise.all(names.map(function (name) {\n            return unloadFontInNamespaceAsync(name, fontMap[name]);\n          }));\n        case 3:\n          return _context4.abrupt(\"return\");\n        case 4:\n          _context4.next = 5;\n          return unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n        case 5:\n          return _context4.abrupt(\"return\", _context4.sent);\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _unloadAsync.apply(this, arguments);\n}\nfunction unloadFontInNamespaceAsync(_x5, _x6) {\n  return _unloadFontInNamespaceAsync.apply(this, arguments);\n}\nfunction _unloadFontInNamespaceAsync() {\n  _unloadFontInNamespaceAsync = (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee5(fontFamily, options) {\n    var nativeFontName;\n    return _regenerator[\"default\"].wrap(function (_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          if (_memory.loaded[fontFamily]) {\n            _context5.next = 1;\n            break;\n          }\n          return _context5.abrupt(\"return\");\n        case 1:\n          delete _memory.loaded[fontFamily];\n        case 2:\n          nativeFontName = (0, _FontLoader.getNativeFontName)(fontFamily);\n          if (nativeFontName) {\n            _context5.next = 3;\n            break;\n          }\n          throw new _expoModulesCore.CodedError(\"ERR_FONT_FAMILY\", \"Cannot unload an empty name\");\n        case 3:\n          _context5.next = 4;\n          return _ExpoFontLoader[\"default\"].unloadAsync(nativeFontName, options);\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _unloadFontInNamespaceAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_expoModulesCore","require","_ExpoFontLoader","_interopRequireDefault","_Font","_FontLoader","_memory","_server","processFontFamily","fontFamily","fontFamilyNeedsScoping","isLoaded","__DEV__","isLoading","console","warn","concat","getNativeFontName","_ExpoFontLoader$custo","Platform","OS","loaded","customNativeFonts","includes","loadPromises","loadAsync","fontFamilyOrFontMap","source","isServer","window","_typeof2","Promise","reject","CodedError","fontMap","names","Object","keys","map","name","registerStaticFont","resolve","all","loadFontInNamespaceAsync","then","_x","_x2","_loadFontInNamespaceAsync","apply","arguments","_asyncToGenerator2","_regenerator","mark","_callee2","asset","wrap","_context2","prev","next","abrupt","hasOwnProperty","getAssetForSource","_callee","_context","loadSingleFontAsync","finish","stop","unloadAllAsync","_unloadAllAsync","_callee3","_i","_Object$keys","_context3","UnavailabilityError","length","join","unloadAsync","_x3","_x4","_unloadAsync","_callee4","options","_context4","unloadFontInNamespaceAsync","sent","_x5","_x6","_unloadFontInNamespaceAsync","_callee5","nativeFontName","_context5"],"sources":["C:\\Users\\vanma\\StudioProjects\\ToneShift\\toneshift-frontend\\node_modules\\expo-font\\src\\Font.ts"],"sourcesContent":["import { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\nimport { loaded, loadPromises } from './memory';\nimport { registerStaticFont } from './server';\n\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/archive/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.warn(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`\n        );\n      } else {\n        console.warn(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through expo-font.`\n        );\n      }\n    }\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  if (Platform.OS === 'web') {\n    return fontFamily in loaded || !!ExpoFontLoader.isLoaded(fontFamily);\n  }\n  return fontFamily in loaded || ExpoFontLoader.customNativeFonts?.includes(fontFamily);\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n  // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n  // standard Expo SDK style guide.\n  const isServer = Platform.OS === 'web' && typeof window === 'undefined';\n\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      return Promise.reject(\n        new CodedError(\n          `ERR_FONT_API`,\n          `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n        )\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n\n    if (isServer) {\n      names.map((name) => registerStaticFont(name, fontMap[name]));\n      return Promise.resolve();\n    }\n\n    return Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name]))).then(\n      () => {}\n    );\n  }\n\n  if (isServer) {\n    registerStaticFont(fontFamilyOrFontMap, source);\n    return Promise.resolve();\n  }\n\n  return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}